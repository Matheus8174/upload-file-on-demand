import io, { Socket } from 'socket.io-client'

class View {
  private readonly fileSize = document.querySelector('#file-size') as HTMLOutputElement
  private readonly file = document.querySelector('input[type="file"]') as HTMLInputElement
  private readonly progressBar = document.querySelector('div.progress-bar') as HTMLDivElement
  private readonly feedback = document.querySelector('#feedback') as HTMLOutputElement

  private socket!: Socket

  constructor() {
    this.file.addEventListener('change', () => this.uploadFile())
  }

  private uploadProgressBar(event: ProgressEvent<FileReader>) {
    if (event.lengthComputable) {
      const percentComplete = Math.round((event.loaded / event.total) * 100);
      this.progressBar.style.width = `${percentComplete}%`;
    }
  }

  private updateFileSize (size: string): void {
    this.fileSize.innerText = `File size: ${size}\n`
  }

  private formatBytes (bytes: number): string {
    const units = ['B', 'KB', 'MB', 'GB', 'TB']

    let i = 0

    for (i; bytes >= 1024 && i < 4; i++) {
      bytes /= 1024
    }

    return `${bytes.toFixed(2)} ${units[i]}`
  }

  private async uploadFile (): Promise<void> {
    const { files } = this.file

    if (!files) throw new Error('file not found')

    const file = files[0]

    this.socket = io('http://localhost:3000', {
      query: {
        fileName: file.name
      }
    })

    const reader = new FileReader()

    reader.readAsDataURL(file)

    const bytes = this.formatBytes(file.size)

    this.updateFileSize(bytes)

    this.feedback.innerHTML = ''

    const that = this

    const writableStream = new WritableStream({
      write(chunk) {
        that.socket.emit('upload', chunk)
      }
    })

    try {
      reader.addEventListener('progress', (data) =>
        this.uploadProgressBar(data)
      )

      await file.stream().pipeTo(writableStream)

      this.feedback.classList.add('text-success')

      this.feedback.innerText = 'File uploaded with sucess'

    } catch {
      this.feedback.classList.add('text-danger')

      this.feedback.innerText = 'Fail to upload file'
    }

    this.socket.disconnect()
  }
}

export default View
